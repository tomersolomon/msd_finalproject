# Each column represents an experiment conducted on one of the Puf proteins: the Mock column is a control; there are repeats (e.g. Puf5.1, Puf5.2) because multiple trials were conducted for each Puf protein.
# The rows represent mRNA ORFs.
# The values in the matrix represent the Cy5/Cy3 fluorescence logratios from the DNA microarrays.
#' 4) Find the pearson correlation between all of the samples, plot a heatmap. See any patterns?
cor(puf.matrix, puf.matrix, use = "na.or.complete") -> correlations
correlations
image(correlations)
# There is a clear pattern that the heatmap is hottest for correlations between a sample to itself, thus the central white line.
# Additionally, the heatmap gets dimmer as the two samples correlated are less like each other.
#' 5) Create a list, `exp.list`, where each entry is a matrix containing the subset of columns that correspond to replicates for a single experiment.
c("Mock", "Puf1", "Puf2", "Puf3", "Puf4", "Puf5") -> names
subset = function(x) {puf.matrix[,grep(x,colnames(puf.matrix))]}
lapply(names, subset) -> exp.list
names -> names(exp.list)
head(exp.list)
#' 6) For each entry in exp.list, find the mean log2-ratio for every gene in the matrix. Remember to account for NAs. The output should be a new matrix, `exp.mat`, which contains the mean logratios for each experiment.
mean_log = function(x) mean(x, na.rm = TRUE)
across_rows = function(y) {apply(y, 1, mean_log)}
sapply(exp.list, across_rows) -> exp.mat
names -> colnames(exp.mat)
head(exp.mat)
#' 7) Filter `exp.mat` to only include rows with no NAs. You will use this matrix for the rest of the assignment. How many rows were removed?
nrow(exp.mat) - nrow(exp.mat[complete.cases(exp.mat),])
exp.mat[complete.cases(exp.mat),] -> exp.mat
head(exp.mat)
#' 8) Plot an ecdf showing the distribution of the logratios for each experiment. Make each experiment a different color. Add a legend so you can tell them apart.
as.data.frame(exp.mat) -> exp.mat.df
plot.ecdf(exp.mat.df$Mock)
plot.ecdf(exp.mat.df$Puf1, col = "red", add = TRUE)
plot.ecdf(exp.mat.df$Puf2, col = "blue", add = TRUE)
plot.ecdf(exp.mat.df$Puf3, col = "green", add = TRUE)
plot.ecdf(exp.mat.df$Puf4, col = "purple", add = TRUE)
plot.ecdf(exp.mat.df$Puf5, col = "orange", add = TRUE)
legend(2.5, 0.95, "Mock")
legend(2.5, 0.8, "Puf1", text.col = "red")
legend(2.5, 0.65, "Puf2", text.col = "blue")
legend(2.5, 0.5, "Puf3", text.col = "green")
legend(2.5, 0.35, "Puf4", text.col = "purple")
legend(2.5, 0.2, "Puf5", text.col = "orange")
' 9) To identify mRNA molecules that are significantly enriched in each experiment, Gerber et al. find the median and standard deviation of the (mean, normalized) log2-ratios in each experiment and select genes that are more than two standard deviations above the median. Why might they choose to use the median rather than the mean, given this approach?
# TBD Question - fine, Bunmi asking too
#' 10) Based on what you've learned in class, can you think of a different way of identifying significantly enriched genes? What are the advantages of this approach? Motivate your answer. Would you expect this approach increase or decrease the number of discoveries? What about the FDR?
# TBD Question - fine, Bunmi asking too
#' 11) Using this method, calculate the z-scores and identify a set of signicantly enriched genes for each experiment (including the mock). How many genes are enriched in each? How many genes are enriched in at least one experiment? Don't worry if your numbers are not the same is in the paper.
mean(exp.mat.df$Mock) -> means
sd(exp.mat.df$Mock) -> sds
(exp.mat - means)/sds -> z
z>2 -> sigz
sapply(1:6, function(x) z[which(z[,x]>2), x]) -> enriched
names -> names(enriched)
enriched # Genes significantly enriched for each experiment
sapply(1:6, function(x) length(enriched[[x]])) -> length_enriched
names -> names(length_enriched)
length_enriched # Number of genes significantly enriched for each experiment
table(apply(sigz, 1, function(x) sum(x))) -> times_enriched
sum(times_enriched) - 5771 # Number of genes significantly enriched at least once
#' 12) Gerber et al. remove enriched genes from each experiment if they are also enriched in the mock experiment. Why?
# They removed the enriched genes that were enriched in the mock experiment because the mock experiment was their control; if a gene was enriched in the mock experiment it was already enriched at baseline and not enriched due to one of the Puf proteins.
#' 13) Remove mock-enriched genes from each experiment, and create a new matrix, `enriched.mat`, that contains only the z-scores that correspond to genes enriched in at least one experiment (but not enriched in mock). How many genes are there now, total?
z[which(!sigz[,1] & (sigz[,2]|sigz[,3]|sigz[,4]|sigz[,5]|sigz[,6])), ] -> enriched.mat
head(enriched.mat)
nrow(enriched.mat)
order(enriched.mat[,1], enriched.mat[,2], enriched.mat[,3], enriched.mat[,4], enriched.mat[,5], enriched.mat[,6], decreasing = TRUE) -> ordered
heatmap(enriched.mat[ordered,], scale = "none")
order(enriched.mat[,2], enriched.mat[,1], enriched.mat[,3], enriched.mat[,4], enriched.mat[,5], enriched.mat[,6], decreasing = TRUE) -> ordered
heatmap(enriched.mat[ordered,], scale = "none")
cor(puf.matrix, puf.matrix, use = "na.or.complete") -> correlations
correlations
image(correlations)
table(apply(sigz, 1, function(x) sum(x))) -> times_enriched
times_enriched
sum(times_enriched) - 5472 # Number of genes significantly enriched at least once
#' ---
#' title: Assignment 8 - Post-transcriptional regulation
#' author: "VERMA_JAYATI"
#' ---
#'
#' 1) Load the yeast organism annotation package (`org.Sc.sgd.db`) and the `GO.db` package.
library(GO.db)
library(org.Sc.sgd.db)
#' 2) Load the file "puf.matrix.rda".
load("C:/Users/jverm/Dropbox/~S8 - Genomics/Assignments/assignment08_puf.matrix-1.rda")
#' 3) What do each of the columns represent? Each of the rows?
head(puf.matrix)
# View(puf.matrix)
# This experiment studied the mRNA-protein interactions for 5 Puf proteins of yeast (S. cerevisiae) using DNA microarrays.
# Each column represents an experiment conducted on one of the Puf proteins: the Mock column is a control; there are repeats (e.g. Puf5.1, Puf5.2) because multiple trials were conducted for each Puf protein.
# The rows represent mRNA ORFs.
# The values in the matrix represent the Cy5/Cy3 fluorescence logratios from the DNA microarrays.
#' 4) Find the pearson correlation between all of the samples, plot a heatmap. See any patterns?
cor(puf.matrix, puf.matrix, use = "na.or.complete") -> correlations
correlations
image(correlations)
# There is a clear pattern that the heatmap is hottest for correlations between a sample to itself, thus the central white line (slope = 1).
# Additionally, the heatmap gets dimmer as the two samples correlated are less like each other.
#' 5) Create a list, `exp.list`, where each entry is a matrix containing the subset of columns that correspond to replicates for a single experiment.
c("Mock", "Puf1", "Puf2", "Puf3", "Puf4", "Puf5") -> names
subset = function(x) {puf.matrix[,grep(x,colnames(puf.matrix))]}
lapply(names, subset) -> exp.list
names -> names(exp.list)
head(exp.list)
#' 6) For each entry in exp.list, find the mean log2-ratio for every gene in the matrix. Remember to account for NAs. The output should be a new matrix, `exp.mat`, which contains the mean logratios for each experiment.
mean_log = function(x) mean(x, na.rm = TRUE)
across_rows = function(y) {apply(y, 1, mean_log)}
sapply(exp.list, across_rows) -> exp.mat
names -> colnames(exp.mat)
head(exp.mat)
#' 7) Filter `exp.mat` to only include rows with no NAs. You will use this matrix for the rest of the assignment. How many rows were removed?
nrow(exp.mat) - nrow(exp.mat[complete.cases(exp.mat),])
exp.mat[complete.cases(exp.mat),] -> exp.mat
head(exp.mat)
#' 8) Plot an ecdf showing the distribution of the logratios for each experiment. Make each experiment a different color. Add a legend so you can tell them apart.
as.data.frame(exp.mat) -> exp.mat.df
plot.ecdf(exp.mat.df$Mock)
plot.ecdf(exp.mat.df$Puf1, col = "red", add = TRUE)
plot.ecdf(exp.mat.df$Puf2, col = "blue", add = TRUE)
plot.ecdf(exp.mat.df$Puf3, col = "green", add = TRUE)
plot.ecdf(exp.mat.df$Puf4, col = "purple", add = TRUE)
plot.ecdf(exp.mat.df$Puf5, col = "orange", add = TRUE)
legend(2.5, 0.95, "Mock")
legend(2.5, 0.8, "Puf1", text.col = "red")
legend(2.5, 0.65, "Puf2", text.col = "blue")
legend(2.5, 0.5, "Puf3", text.col = "green")
legend(2.5, 0.35, "Puf4", text.col = "purple")
legend(2.5, 0.2, "Puf5", text.col = "orange")
#' 9) To identify mRNA molecules that are significantly enriched in each experiment, Gerber et al. find the median and standard deviation of the (mean, normalized) log2-ratios in each experiment and select genes that are more than two standard deviations above the median. Why might they choose to use the median rather than the mean, given this approach?
# They might have chosen to use the median rather than the mean because means, as a statistical measure, tend to be more easily skewed by extreme values; however, medians are a more stable measure of the center of a distribution.
#' 10) Based on what you've learned in class, can you think of a different way of identifying significantly enriched genes? What are the advantages of this approach? Motivate your answer. Would you expect this approach increase or decrease the number of discoveries? What about the FDR?
# We could calculate the z-score based off of a null distribution, and then use a z-score cutoff that is significant. This allows us to easily convert to a p-score using pnorm(). We would expect this approach to decrease the number of discoveries and FDR--depending on the z-score cutoff used--because both of these measures are directly dependent on p-value. For example, FDR = (p-value)*(# of tests)/(# of discoveries).
#' 11) Using this method, calculate the z-scores and identify a set of signicantly enriched genes for each experiment (including the mock). How many genes are enriched in each? How many genes are enriched in at least one experiment? Don't worry if your numbers are not the same is in the paper.
mean(exp.mat.df$Mock) -> means
sd(exp.mat.df$Mock) -> sds
(exp.mat - means)/sds -> z
z>2 -> sigz
sapply(1:6, function(x) z[which(z[,x]>2), x]) -> enriched
names -> names(enriched)
enriched # Genes significantly enriched for each experiment
sapply(1:6, function(x) length(enriched[[x]])) -> length_enriched
names -> names(length_enriched)
length_enriched # Number of genes significantly enriched for each experiment
table(apply(sigz, 1, function(x) sum(x))) -> times_enriched
sum(times_enriched) - 5472 # Number of genes significantly enriched at least once
#' 12) Gerber et al. remove enriched genes from each experiment if they are also enriched in the mock experiment. Why?
# They removed the enriched genes that were enriched in the mock experiment because the mock experiment was their control; if a gene was enriched in the mock experiment it was already enriched at baseline and not enriched due to one of the Puf proteins.
#' 13) Remove mock-enriched genes from each experiment, and create a new matrix, `enriched.mat`, that contains only the z-scores that correspond to genes enriched in at least one experiment (but not enriched in mock). How many genes are there now, total?
z[which(!sigz[,1] & (sigz[,2]|sigz[,3]|sigz[,4]|sigz[,5]|sigz[,6])), ] -> enriched.mat
head(enriched.mat)
nrow(enriched.mat)
#' 14) Reorder `enriched.mat` to (roughly) reflect the ordering in Figure 3B of Gerber et al. (hint: `order()` can take more than one argument). Use `heatmap()` to show gene expression levels for these genes. Remember to suppress the hierarchical clustering of rows and columns.
order(enriched.mat[,1], enriched.mat[,2], enriched.mat[,3], enriched.mat[,4], enriched.mat[,5], enriched.mat[,6], decreasing = TRUE) -> ordered
heatmap(enriched.mat[ordered,], scale = "none")
z[which(!sigz[,1] & (sigz[,2]|sigz[,3]|sigz[,4]|sigz[,5]|sigz[,6])), ] -> enriched.mat
head(enriched.mat)
nrow(enriched.mat)
length(which(!sigz[,1] & sigz[,3] & sigz[,2])) # Also enriched in Puf1
length(which(!sigz[,1] & sigz[,3] & sigz[,4])) # Also enriched in Puf3
length(which(!sigz[,1] & sigz[,3] & sigz[,5])) # Also enriched in Puf4
length(which(!sigz[,1] & sigz[,3] & sigz[,6])) # Also enriched in Puf5
# (This is assuming we are not including genes enriched in Mock)
m = length(which(sigz[,3]))
m = length(which(sigz[,3]))
phyper(length(which(!sigz[,1] & sigz[,3] & sigz[,2])), m, length(which(!sigz[,1] & !sigz[,3] & sigz[,2])), length(which(sigz[,2])))
phyper(length(which(!sigz[,1] & sigz[,3] & sigz[,4])), m, length(which(!sigz[,1] & !sigz[,3] & sigz[,4])), length(which(sigz[,4])))
phyper(length(which(!sigz[,1] & sigz[,3] & sigz[,5])), m, length(which(!sigz[,1] & !sigz[,3] & sigz[,5])), length(which(sigz[,5])))
phyper(length(which(!sigz[,1] & sigz[,3] & sigz[,6])), m, length(which(!sigz[,1] & !sigz[,3] & sigz[,6])), length(which(sigz[,6])))
m = length(which(sigz[,3]))
phyper(length(which(!sigz[,1] & sigz[,3] & sigz[,2])), m, length(which(!sigz[,1] & !sigz[,3] & sigz[,2])), length(which(!sigz[,1] & sigz[,2])))
phyper(length(which(!sigz[,1] & sigz[,3] & sigz[,4])), m, length(which(!sigz[,1] & !sigz[,3] & sigz[,4])), length(which(!sigz[,1] & sigz[,4])))
phyper(length(which(!sigz[,1] & sigz[,3] & sigz[,5])), m, length(which(!sigz[,1] & !sigz[,3] & sigz[,5])), length(which(!sigz[,1] & sigz[,5])))
phyper(length(which(!sigz[,1] & sigz[,3] & sigz[,6])), m, length(which(!sigz[,1] & !sigz[,3] & sigz[,6])), length(which(!sigz[,1] & sigz[,6])))
m = length(which(sigz[,3]))
n = length(which(!sigz[,3]))
phyper(length(which(!sigz[,1] & sigz[,3] & sigz[,2])), m, n, length(which(!sigz[,1] & sigz[,2])))
phyper(length(which(!sigz[,1] & sigz[,3] & sigz[,4])), m, n, length(which(!sigz[,1] & sigz[,4])))
phyper(length(which(!sigz[,1] & sigz[,3] & sigz[,5])), m, n, length(which(!sigz[,1] & sigz[,5])))
phyper(length(which(!sigz[,1] & sigz[,3] & sigz[,6])), m, n, length(which(!sigz[,1] & sigz[,6])))
m = length(which(sigz[,3]))
n = length(which(!sigz[,3]))
phyper(length(which(sigz[,3] & sigz[,2])), m, n, length(which(sigz[,2])))
phyper(length(which(sigz[,3] & sigz[,4])), m, n, length(which(sigz[,4])))
phyper(length(which(sigz[,3] & sigz[,5])), m, n, length(which(sigz[,5])))
phyper(length(which(sigz[,3] & sigz[,6])), m, n, length(which(sigz[,6])))
m = length(which(!sigz[,1] & sigz[,3]))
n = length(which(!sigz[,1] & !sigz[,3]))
phyper(length(which(!sigz[,1] & sigz[,3] & sigz[,2])), m, n, length(which(!sigz[,1] & sigz[,2])))
phyper(length(which(!sigz[,1] & sigz[,3] & sigz[,4])), m, n, length(which(!sigz[,1] & sigz[,4])))
phyper(length(which(!sigz[,1] & sigz[,3] & sigz[,5])), m, n, length(which(!sigz[,1] & sigz[,5])))
phyper(length(which(!sigz[,1] & sigz[,3] & sigz[,6])), m, n, length(which(!sigz[,1] & sigz[,6])))
m = length(which(sigz[,3]))
n = length(which(!sigz[,3]))
phyper(length(which(!sigz[,1] & sigz[,3] & sigz[,2])), m, n, length(which(!sigz[,1] & sigz[,2])))
phyper(length(which(!sigz[,1] & sigz[,3] & sigz[,4])), m, n, length(which(!sigz[,1] & sigz[,4])))
phyper(length(which(!sigz[,1] & sigz[,3] & sigz[,5])), m, n, length(which(!sigz[,1] & sigz[,5])))
phyper(length(which(!sigz[,1] & sigz[,3] & sigz[,6])), m, n, length(which(!sigz[,1] & sigz[,6])))
m = length(which(!sigz[,1] & sigz[,3]))
n = length(which(!sigz[,1] & !sigz[,3]))
phyper(length(which(!sigz[,1] & sigz[,3] & sigz[,2])), m, n, length(which(!sigz[,1] & sigz[,2])))
phyper(length(which(!sigz[,1] & sigz[,3] & sigz[,4])), m, n, length(which(!sigz[,1] & sigz[,4])))
phyper(length(which(!sigz[,1] & sigz[,3] & sigz[,5])), m, n, length(which(!sigz[,1] & sigz[,5])))
phyper(length(which(!sigz[,1] & sigz[,3] & sigz[,6])), m, n, length(which(!sigz[,1] & sigz[,6])))
select(GO.db, keytype="TERM", keys="nucleolus", columns = "GOID")$GOID -> nucleolus_GOID
nucleolus_GOID
select(org.Sc.sgd.db, keys=nucleolus_GOID, columns="ORF", keytype="GOALL")$ORF -> nucleolus_ORFS
nucleolus_ORFS
universe = intersect(row.names(exp.mat), nucleolus_ORFS)
universe
intersect(row.names(exp.mat), nucleolus_ORFS) -> universe
row.names(exp.mat)[which(sigz[,5])]) -> enriched_puf4
row.names(exp.mat)[which(sigz[,5])] -> enriched_puf4
enriched_puf4
universe
? fisher.test
fisher.test(enriched_puf4,universe)
intersect(row.names(exp.mat), nucleolus_ORFS) -> universe
row.names(exp.mat)[which(sigz[,5])] -> enriched_puf4
fisher.test(enriched_puf4,universe)
fisher.test(enriched_puf4,row.names(exp.mat) %in% universe)
row.names(exp.mat) %in% universe
enriched_puf4
orf_nucleolus = rownames(enriched.mat) %in% inter_nucleolus
orf_nucleolus = rownames(enriched.mat) %in% universe
orf_nucleolus
length(orf_nucleolus)
length(enriched_puf4)
fisher.test(enriched_puf4, univserse)
intersect(row.names(exp.mat), nucleolus_ORFS) -> universe
row.names(exp.mat)[which(sigz[,5])] -> enriched_puf4
fisher.test(enriched_puf4, universe)
intersect(row.names(exp.mat), nucleolus_ORFS) -> universe
row.names(exp.mat)[which(sigz[,5])] -> enriched_puf4
fisher.test(enriched_puf4, row.names(exp.mat) %in% universe
)
length(universe)
length(enriched_puf4)
row.names(exp.mat)[which(!sigz[,1] & sigz[,5])] -> enriched_puf4
enriched_puf4
length(enriched_puf4)
row.names(enriched.mat)[which(enriched.mat[,5]>2] -> enriched_puf4
fisher.test(enriched_puf4, row.names(exp.mat) %in% universe)
? fisher.test
k4 = length(intersect(nucleolus_ORFS, )
n4 = length(which(sigz[,5]))
K = length(nucleolus_ORFS)
N = nrow(exp.mat)
phyper(k4, n4, K, N)
# Not working - Bunmi asked/figure out from 16
#' 19) Now test each of the Puf proteins for enrichment in this category. Are any of the others enriched for nucleolar genes?
kmock = length(intersect(nucleolus_ORFS, row.names(exp.mat)[which(sigz[,1])]))
nmock = length(which(sigz[,1]))
phyper(kmock, nmock, K, N)
k1 = length(intersect(nucleolus_ORFS, row.names(exp.mat)[which(sigz[,2])]))
n1 = length(which(sigz[,2]))
phyper(k1, n1, K, N)
k2 = length(intersect(nucleolus_ORFS, row.names(exp.mat)[which(sigz[,3])]))
n2 = length(which(sigz[,3]))
phyper(k2, n2, K, N)
k3 = length(intersect(nucleolus_ORFS, row.names(exp.mat)[which(sigz[,4])]))
n3 = length(which(sigz[,4]))
phyper(k3, n3, K, N)
k5 = length(intersect(nucleolus_ORFS, row.names(exp.mat)[which(sigz[,6])]))
n5 = length(which(sigz[,6]))
phyper(k5, n5, K, N)
row.names(enriched.mat)[which(enriched.mat[,5]>2)] -> enriched_puf4
enriched_puf4
length(enriched_puf4)
exp.mat[,5]>2
fisher.test(exp.mat[,5]>2 , row.names(exp.mat) %in% universe)
intersect(row.names(exp.mat), nucleolus_ORFS) -> universe
exp.mat[,5]>2 -> enriched_puf4
fisher.test(enriched_puf4, row.names(exp.mat) %in% universe)
fisher.test(exp.mat[,2]>2 , row.names(exp.mat) %in% universe)
fisher.test(exp.mat[,2]>2 , row.names(exp.mat) %in% universe)
fisher.test(exp.mat[,3]>2 , row.names(exp.mat) %in% universe)
fisher.test(exp.mat[,4]>2 , row.names(exp.mat) %in% universe)
fisher.test(exp.mat[,6]>2 , row.names(exp.mat) %in% universe)
fisher.test(enriched_puf4, row.names(exp.mat) %in% universe)
# This is enriched for nucleolar genes because of its significant p-value 2.2*10^-16.
fisher.test(exp.mat[,2]>2 , row.names(exp.mat) %in% universe)
fisher.test(exp.mat[,3]>2 , row.names(exp.mat) %in% universe)
fisher.test(exp.mat[,4]>2 , row.names(exp.mat) %in% universe)
fisher.test(exp.mat[,6]>2 , row.names(exp.mat) %in% universe)
length(enriched.mat[,3]>2)
m = length(which(!sigz[,1] & sigz[,3]))
m
sigz[,3]
m = length(enriched.mat[,3]>2)
n = length(enriched.mat[,3]<=2)
n
m
m
m = length(which(!sigz[,1] & sigz[,3]))
n = length(which(!sigz[,1] & !sigz[,3]))
n
m
6430 + 257
nrow(enriched.mat)
nrow(exp.mat)
enriched.mat[,3]
enriched.mat[,3]>2
phyper(length(which(!sigz[,1] & sigz[,3] & sigz[,2])), m, n, length(which(!sigz[,1] & sigz[,2]))) # Puf1
phyper(length(which(!sigz[,1] & sigz[,3] & sigz[,4])), m, n, length(which(!sigz[,1] & sigz[,4]))) # Puf3
phyper(length(which(!sigz[,1] & sigz[,3] & sigz[,5])), m, n, length(which(!sigz[,1] & sigz[,5]))) # Puf4
phyper(length(which(!sigz[,1] & sigz[,3] & sigz[,6])), m, n, length(which(!sigz[,1] & sigz[,6]))) # Puf5
length(which(!sigz[,1] & sigz[,3] & sigz[,2]))
length(which(!sigz[,1] & sigz[,3] & sigz[,4]))
length(which(!sigz[,1] & sigz[,3] & sigz[,5]))
length(which(!sigz[,1] & sigz[,3] & sigz[,6]))
length(which(!sigz[,1] & sigz[,3] & sigz[,2])) # Also enriched in Puf1
length(which(!sigz[,1] & sigz[,3] & sigz[,4])) # Also enriched in Puf3
length(which(!sigz[,1] & sigz[,3] & sigz[,5])) # Also enriched in Puf4
length(which(!sigz[,1] & sigz[,3] & sigz[,6])) # Also enriched in Puf5
m = length(which(!sigz[,1] & sigz[,3]))
n = length(which(!sigz[,1] & !sigz[,3]))
phyper(length(which(!sigz[,1] & sigz[,3] & sigz[,2])), m, n, length(which(!sigz[,1] & sigz[,2]))) # Puf1
phyper(length(which(!sigz[,1] & sigz[,3] & sigz[,4])), m, n, length(which(!sigz[,1] & sigz[,4]))) # Puf3
phyper(length(which(!sigz[,1] & sigz[,3] & sigz[,5])), m, n, length(which(!sigz[,1] & sigz[,5]))) # Puf4
phyper(length(which(!sigz[,1] & sigz[,3] & sigz[,6])), m, n, length(which(!sigz[,1] & sigz[,6]))) # Puf5
(34 + 43 + 26 + 46 + 38 + 32 + 35 + 31 + 33 + 42 + 00)/(34 + 43 + 34 + 46 + 40 + 42 + 36 + 35 + 38 + 42 + 40)
(34 + 43 + 26 + 46 + 38 + 32 + 35 + 31 + 33 + 42 + 00 + 00)/(34 + 43 + 34 + 46 + 40 + 42 + 36 + 35 + 38 + 42 + 40 + 32)
+
50*1
(34 + 43 + 26 + 46 + 38 + 32 + 35 + 31 + 33 + 42 + 00 + 00)/(34 + 43 + 34 + 46 + 40 + 42 + 36 + 35 + 38 + 42 + 40 + 32)*25
(34 + 43 + 26 + 46 + 38 + 32 + 35 + 31 + 33 + 42 + 00 + 00)/(34 + 43 + 34 + 46 + 40 + 42 + 36 + 35 + 38 + 42 + 40 + 32)*25 +
25*27/40
(34 + 43 + 26 + 46 + 38 + 32 + 35 + 31 + 33 + 42 + 00 + 00)/(34 + 43 + 34 + 46 + 40 + 42 + 36 + 35 + 38 + 42 + 40 + 32)*25 +
25*27/40 +
50*1
(34 + 43 + 26 + 46 + 38 + 32 + 35 + 31 + 33 + 42 + 00 + 32)/(34 + 43 + 34 + 46 + 40 + 42 + 36 + 35 + 38 + 42 + 40 + 32)*25 +
25*27/40 +
50*1
(34 + 43 + 26 + 46 + 38 + 32 + 35 + 31 + 33 + 42 + 32)/(34 + 43 + 34 + 46 + 40 + 42 + 36 + 35 + 38 + 42 + 32)*25 +
25*27/40 +
50*1
(34 + 43 + 26 + 46 + 38 + 32 + 35 + 31 + 33 + 42 + 15)/(34 + 43 + 34 + 46 + 40 + 42 + 36 + 35 + 38 + 42 + 32)*25 +
25*27/40 +
50*1
(34 + 43 + 26 + 46 + 38 + 32 + 35 + 31 + 33 + 42 + 20)/(34 + 43 + 34 + 46 + 40 + 42 + 36 + 35 + 38 + 42 + 32)*25 +
25*27/40 +
50*1
(34 + 43 + 26 + 46 + 38 + 32 + 35 + 31 + 33 + 42 + 30)/(34 + 43 + 34 + 46 + 40 + 42 + 36 + 35 + 38 + 42 + 32)*25 +
25*27/40 +
50*1
(34 + 43 + 26 + 46 + 38 + 32 + 35 + 31 + 33 + 42 + 32)/(34 + 43 + 34 + 46 + 40 + 42 + 36 + 35 + 38 + 42 + 32)*25 +
25*27/40 +
50*1
setwd("C:/Users/jverm/Dropbox/~S8 - Social/Project")
library('tidyverse')
library('ggplot2')
library(tm)
library(Matrix)
library(glmnet)
library(ROCR)
####################################
# Number of links per article
####################################
# load file
read.delim("mod_links.tsv", header = F) -> links
c("article", "link") -> colnames(links)
head(links)
# count number of links for each article
count(links, article) -> links_counted
c("article", "num_links") -> colnames(links_counted)
head(links_counted)
setwd("C:/cygwin64/home/jverm/GitHub/msd_finalproject/data/plaintext_articles")
# create empty column for number of words for each article
mutate(links_counted, words = 0) -> article_summary
# For each article
for (k in 1:5) {
# load file
as.matrix(article_summary)[5, "article"] -> article_name
paste(article_name,".txt", sep = "") -> file_name
read_file(file_name) -> file
file -> article_summary[5, "words"]
}
View(article_summary)
# For each article
for (k in 1:5) {
# load file
as.matrix(article_summary)[k, "article"] -> article_name
paste(article_name,".txt", sep = "") -> file_name
read_file(file_name) -> file
file -> article_summary[k, "words"]
}
View(article_summary)
for (k in 1:nrow(article_summary)) {
# load file
as.matrix(article_summary)[k, "article"] -> article_name
paste(article_name,".txt", sep = "") -> file_name
read_file(file_name) -> file
file -> article_summary[k, "words"]
}
View(article_summary)
Corpus(VectorSource(article_summary$words)) -> corpus
tm_map(corpus, removePunctuation) -> corpus
tm_map(corpus, removeNumbers) -> corpus
DocumentTermMatrix(corpus) -> dtm
dtm_to_sparse <- function(dtm) {
sparseMatrix(i=dtm$i, j=dtm$j, x=dtm$v, dims=c(dtm$nrow, dtm$ncol), dimnames=dtm$dimnames)
}
dtm_to_sparse(dtm) -> sparse
head(sparse)
#' author: "JAYATI VERMA"
#' uni: "jv2488"
setwd("C:/Users/jverm/Dropbox/~S8 - Social/Homework 3")
# read business and world articles into one data frame
read.delim("business.tsv.txt") -> business
read.delim("world.tsv.txt") -> world
rbind(business, world) -> df
head(df)
# create a Corpus from the article snippets
Corpus(VectorSource(df$snippet)) -> corpus
# remove punctuation and numbers
tm_map(corpus, removePunctuation) -> corpus
tm_map(corpus, removeNumbers) -> corpus
# create a DocumentTermMatrix from the snippet Corpus
DocumentTermMatrix(corpus) -> dtm
# convert the DocumentTermMatrix to a sparseMatrix, required by cv.glmnet
# helper function
dtm_to_sparse <- function(dtm) {
sparseMatrix(i=dtm$i, j=dtm$j, x=dtm$v, dims=c(dtm$nrow, dtm$ncol), dimnames=dtm$dimnames)
}
dtm_to_sparse(dtm) -> sparse
head(sparse)
# create a Corpus from the article words
Corpus(VectorSource(article_summary$words)) -> corpus
# remove punctuation and numbers
tm_map(corpus, removePunctuation) -> corpus
tm_map(corpus, removeNumbers) -> corpus
# create a DocumentTermMatrix from the snippet Corpus
DocumentTermMatrix(corpus) -> dtm
# convert the DocumentTermMatrix to a sparseMatrix, required by cv.glmnet
# helper function
dtm_to_sparse <- function(dtm) {
sparseMatrix(i=dtm$i, j=dtm$j, x=dtm$v, dims=c(dtm$nrow, dtm$ncol), dimnames=dtm$dimnames)
}
dtm_to_sparse(dtm) -> sparse
head(sparse)
nrow(dtm)
nrow(article_summary)
article_summary$article -> row.names(dtm)
View(dtm)
head(dtm)
# convert the DocumentTermMatrix to a sparseMatrix, required by cv.glmnet
# helper function
dtm_to_sparse <- function(dtm) {
sparseMatrix(i=dtm$i, j=dtm$j, x=dtm$v, dims=c(dtm$nrow, dtm$ncol), dimnames=dtm$dimnames)
}
dtm_to_sparse(dtm) -> sparse
head(sparse)
write.table(article_summary, file="mymatrix.txt", row.names=FALSE, col.names=FALSE)
write.table(article_summary, file="words_in_articles.csv", sep = "\t")
write.table(article_summary, file="words_in_articles.csv")
setwd("C:/Users/jverm/Dropbox/~S8 - Social/Project")
# Concept: regression to see if there is correlation between article size and number of links article contains
####################################
# Number of links per article
####################################
# load file
read.delim("mod_links.tsv", header = F) -> links
c("article", "link") -> colnames(links)
head(links)
# count number of links for each article
count(links, article) -> links_counted
c("article", "num_links") -> colnames(links_counted)
head(links_counted)
####################################
# Number of words per article
####################################
# create empty column for number of words for each article
mutate(links_counted, num_words = 0) -> article_summary
# For each article
for (k in 1:nrow(article_summary)) {
# load file
as.matrix(article_summary)[k, "article"] -> article_name
paste(article_name,".txt", sep = "") -> file_name
read_file(file_name) -> file
# separate words
strsplit(file, split = " ") -> words
# count words and put into column
length(words[[1]]) -> article_summary[k, "num_words"]
}
setwd("C:/cygwin64/home/jverm/GitHub/msd_finalproject/data/plaintext_articles")
# create empty column for number of words for each article
mutate(links_counted, num_words = 0) -> article_summary
# For each article
for (k in 1:nrow(article_summary)) {
# load file
as.matrix(article_summary)[k, "article"] -> article_name
paste(article_name,".txt", sep = "") -> file_name
read_file(file_name) -> file
# separate words
strsplit(file, split = " ") -> words
# count words and put into column
length(words[[1]]) -> article_summary[k, "num_words"]
}
# linear scale
ggplot(article_summary, aes(x = num_words, y = num_links)) +
geom_point() +
labs(x = "Number of words", y = "Number of links", title = "Article Connections")
# log scale
ggplot(article_summary, aes(x = num_words, y = num_links)) +
geom_point() +
scale_y_continuous(trans = 'log10') +
scale_x_continuous(trans = 'log10') +
labs(x = "Number of words", y = "Number of links", title = "Article Connections")
summary(fit)
# regress num of links~num words for each article
lm(article_summary$num_links~article_summary$num_words) -> fit
summary(fit)
ggplot(article_summary, aes(x = num_words, y = num_links)) +
geom_point() +
geom_abline(intercept = 8.2771803, slope = 0.0042106)
